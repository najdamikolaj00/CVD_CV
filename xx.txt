{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cpu\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import numpy as np\n",
    "from PIL import Image\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "import torch.nn.functional as F\n",
    "from torch.utils.data import Dataset, DataLoader, random_split\n",
    "import torchvision.transforms as transforms\n",
    "\n",
    "from sklearn.model_selection import StratifiedKFold\n",
    "from sklearn.model_selection import KFold\n",
    "\n",
    "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "print(device)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "torch.cuda.is_available()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.0.1+cpu\n"
     ]
    }
   ],
   "source": [
    "print(torch.__version__)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "None\n"
     ]
    }
   ],
   "source": [
    "print(torch.version.cuda)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "def to_device(data, device):\n",
    "    if isinstance(data, (list, tuple)):\n",
    "        return [to_device(x, device) for x in data]\n",
    "    return data.to(device, non_blocking=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "class SpecNet(nn.Module):\n",
    "    def __init__(self):\n",
    "        super().__init__()\n",
    "\n",
    "        self.conv1 = nn.Conv2d(in_channels=3, out_channels=4, \n",
    "                               kernel_size=5, stride=1, padding=2)\n",
    "        self.batch1 = nn.BatchNorm2d(4)\n",
    "        self.relu1 = nn.ReLU()\n",
    "        self.pool1 = nn.MaxPool2d(kernel_size=4)\n",
    "        \n",
    "        self.conv2 = nn.Conv2d(in_channels=4, out_channels=16, \n",
    "                               kernel_size=5, stride=1, padding=2)\n",
    "        self.batch2 = nn.BatchNorm2d(16)\n",
    "        self.relu2 = nn.ReLU()\n",
    "        self.pool2 = nn.MaxPool2d(kernel_size=4)\n",
    "\n",
    "        self.conv3 = nn.Conv2d(in_channels=16, out_channels=32, \n",
    "                               kernel_size=5, stride=1, padding=2)\n",
    "        self.batch3 = nn.BatchNorm2d(32)\n",
    "        self.relu3 = nn.ReLU()\n",
    "        self.pool3 = nn.MaxPool2d(kernel_size=2)\n",
    "       \n",
    "        self.fc = nn.Linear(21*21*32, 2)\n",
    "\n",
    "    def forward(self, x):\n",
    "        x = self.conv1(x)\n",
    "        x = self.batch1(x)\n",
    "        x = self.relu1(x)\n",
    "\n",
    "        x = self.pool1(x)\n",
    "\n",
    "        x = self.conv2(x)\n",
    "        x = self.batch2(x)\n",
    "        x = self.relu2(x)\n",
    "\n",
    "        x = self.pool2(x)\n",
    "\n",
    "        x = self.conv3(x)\n",
    "        x = self.batch3(x)\n",
    "        x = self.relu3(x)\n",
    "\n",
    "        x = self.pool3(x)\n",
    "\n",
    "        x = x.view(x.size(0), -1)\n",
    "\n",
    "        x = self.fc(x)\n",
    "\n",
    "        x = F.softmax(x, dim=1)\n",
    "        \n",
    "        return x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "class SpectrogramDataset(Dataset):\n",
    "    def __init__(self, paths_to_spectrograms, transform):\n",
    "        self.paths_to_spectrograms = paths_to_spectrograms\n",
    "        self.transform = transform\n",
    "        self.patient_spectrograms = {}\n",
    "        self.patient_labels = {}\n",
    "\n",
    "        for path in paths_to_spectrograms:\n",
    "            spec_path, label = path.split(' ')\n",
    "            patient_id = os.path.splitext(os.path.basename(spec_path))[0]\n",
    "            patient_id = patient_id.split('_')[0]\n",
    "            \n",
    "            if patient_id not in self.patient_labels:\n",
    "                self.patient_labels[patient_id] = int(label)\n",
    "            \n",
    "            if patient_id not in self.patient_spectrograms:\n",
    "                self.patient_spectrograms[patient_id] = []\n",
    "            self.patient_spectrograms[patient_id].append(spec_path)\n",
    "    \n",
    "    def __len__(self):\n",
    "        return len(self.patient_spectrograms)\n",
    "\n",
    "    def __getitem__(self, idx):\n",
    "\n",
    "        patient_id = list(self.patient_spectrograms.keys())[idx]\n",
    "        spectrogram_paths = self.patient_spectrograms[patient_id]\n",
    "        \n",
    "        spectrograms = [Image.open(path).convert('RGB') for path in spectrogram_paths]\n",
    "        \n",
    "        if self.transform:\n",
    "            spectrograms = [self.transform(img) for img in spectrograms]\n",
    "            \n",
    "        spectrograms = [torch.tensor(np.array(img), dtype=torch.float32) for img in spectrograms]\n",
    "        \n",
    "        spectrograms = [img / 255.0 for img in spectrograms]\n",
    "\n",
    "        combined_spectrogram = torch.cat(spectrograms, dim=0)\n",
    "        combined_spectrogram = combined_spectrogram.permute(2, 0, 1)\n",
    "        \n",
    "        label = self.patient_labels[patient_id]\n",
    "        \n",
    "        return combined_spectrogram, label\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['HC_a\\\\healthy\\\\10_a_chromagram.png 0', 'HC_a\\\\healthy\\\\10_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\10_a_mfcc.png 0', 'HC_a\\\\healthy\\\\11_a_chromagram.png 0', 'HC_a\\\\healthy\\\\11_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\11_a_mfcc.png 0', 'HC_a\\\\healthy\\\\12_a_chromagram.png 0', 'HC_a\\\\healthy\\\\12_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\12_a_mfcc.png 0', 'HC_a\\\\healthy\\\\130_a_chromagram.png 0', 'HC_a\\\\healthy\\\\130_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\130_a_mfcc.png 0', 'HC_a\\\\healthy\\\\131_a_chromagram.png 0', 'HC_a\\\\healthy\\\\131_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\131_a_mfcc.png 0', 'HC_a\\\\healthy\\\\132_a_chromagram.png 0', 'HC_a\\\\healthy\\\\132_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\132_a_mfcc.png 0', 'HC_a\\\\healthy\\\\133_a_chromagram.png 0', 'HC_a\\\\healthy\\\\133_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\133_a_mfcc.png 0', 'HC_a\\\\healthy\\\\134_a_chromagram.png 0', 'HC_a\\\\healthy\\\\134_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\134_a_mfcc.png 0', 'HC_a\\\\healthy\\\\135_a_chromagram.png 0', 'HC_a\\\\healthy\\\\135_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\135_a_mfcc.png 0', 'HC_a\\\\healthy\\\\136_a_chromagram.png 0', 'HC_a\\\\healthy\\\\136_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\136_a_mfcc.png 0', 'HC_a\\\\healthy\\\\137_a_chromagram.png 0', 'HC_a\\\\healthy\\\\137_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\137_a_mfcc.png 0', 'HC_a\\\\healthy\\\\138_a_chromagram.png 0', 'HC_a\\\\healthy\\\\138_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\138_a_mfcc.png 0', 'HC_a\\\\healthy\\\\139_a_chromagram.png 0', 'HC_a\\\\healthy\\\\139_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\139_a_mfcc.png 0', 'HC_a\\\\healthy\\\\13_a_chromagram.png 0', 'HC_a\\\\healthy\\\\13_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\13_a_mfcc.png 0', 'HC_a\\\\healthy\\\\140_a_chromagram.png 0', 'HC_a\\\\healthy\\\\140_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\140_a_mfcc.png 0', 'HC_a\\\\healthy\\\\141_a_chromagram.png 0', 'HC_a\\\\healthy\\\\141_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\141_a_mfcc.png 0', 'HC_a\\\\healthy\\\\142_a_chromagram.png 0', 'HC_a\\\\healthy\\\\142_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\142_a_mfcc.png 0', 'HC_a\\\\healthy\\\\143_a_chromagram.png 0', 'HC_a\\\\healthy\\\\143_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\143_a_mfcc.png 0', 'HC_a\\\\healthy\\\\144_a_chromagram.png 0', 'HC_a\\\\healthy\\\\144_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\144_a_mfcc.png 0', 'HC_a\\\\healthy\\\\145_a_chromagram.png 0', 'HC_a\\\\healthy\\\\145_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\145_a_mfcc.png 0', 'HC_a\\\\healthy\\\\146_a_chromagram.png 0', 'HC_a\\\\healthy\\\\146_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\146_a_mfcc.png 0', 'HC_a\\\\healthy\\\\147_a_chromagram.png 0', 'HC_a\\\\healthy\\\\147_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\147_a_mfcc.png 0', 'HC_a\\\\healthy\\\\148_a_chromagram.png 0', 'HC_a\\\\healthy\\\\148_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\148_a_mfcc.png 0', 'HC_a\\\\healthy\\\\149_a_chromagram.png 0', 'HC_a\\\\healthy\\\\149_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\149_a_mfcc.png 0', 'HC_a\\\\healthy\\\\14_a_chromagram.png 0', 'HC_a\\\\healthy\\\\14_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\14_a_mfcc.png 0', 'HC_a\\\\healthy\\\\15_a_chromagram.png 0', 'HC_a\\\\healthy\\\\15_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\15_a_mfcc.png 0', 'HC_a\\\\healthy\\\\16_a_chromagram.png 0', 'HC_a\\\\healthy\\\\16_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\16_a_mfcc.png 0', 'HC_a\\\\healthy\\\\17_a_chromagram.png 0', 'HC_a\\\\healthy\\\\17_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\17_a_mfcc.png 0', 'HC_a\\\\healthy\\\\185_a_chromagram.png 0', 'HC_a\\\\healthy\\\\185_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\185_a_mfcc.png 0', 'HC_a\\\\healthy\\\\186_a_chromagram.png 0', 'HC_a\\\\healthy\\\\186_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\186_a_mfcc.png 0', 'HC_a\\\\healthy\\\\187_a_chromagram.png 0', 'HC_a\\\\healthy\\\\187_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\187_a_mfcc.png 0', 'HC_a\\\\healthy\\\\188_a_chromagram.png 0', 'HC_a\\\\healthy\\\\188_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\188_a_mfcc.png 0', 'HC_a\\\\healthy\\\\189_a_chromagram.png 0', 'HC_a\\\\healthy\\\\189_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\189_a_mfcc.png 0', 'HC_a\\\\healthy\\\\18_a_chromagram.png 0', 'HC_a\\\\healthy\\\\18_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\18_a_mfcc.png 0', 'HC_a\\\\healthy\\\\190_a_chromagram.png 0', 'HC_a\\\\healthy\\\\190_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\190_a_mfcc.png 0', 'HC_a\\\\healthy\\\\191_a_chromagram.png 0', 'HC_a\\\\healthy\\\\191_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\191_a_mfcc.png 0', 'HC_a\\\\healthy\\\\192_a_chromagram.png 0', 'HC_a\\\\healthy\\\\192_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\192_a_mfcc.png 0', 'HC_a\\\\healthy\\\\193_a_chromagram.png 0', 'HC_a\\\\healthy\\\\193_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\193_a_mfcc.png 0', 'HC_a\\\\healthy\\\\194_a_chromagram.png 0', 'HC_a\\\\healthy\\\\194_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\194_a_mfcc.png 0', 'HC_a\\\\healthy\\\\195_a_chromagram.png 0', 'HC_a\\\\healthy\\\\195_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\195_a_mfcc.png 0', 'HC_a\\\\healthy\\\\196_a_chromagram.png 0', 'HC_a\\\\healthy\\\\196_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\196_a_mfcc.png 0', 'HC_a\\\\healthy\\\\197_a_chromagram.png 0', 'HC_a\\\\healthy\\\\197_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\197_a_mfcc.png 0', 'HC_a\\\\healthy\\\\198_a_chromagram.png 0', 'HC_a\\\\healthy\\\\198_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\198_a_mfcc.png 0', 'HC_a\\\\healthy\\\\199_a_chromagram.png 0', 'HC_a\\\\healthy\\\\199_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\199_a_mfcc.png 0', 'HC_a\\\\healthy\\\\19_a_chromagram.png 0', 'HC_a\\\\healthy\\\\19_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\19_a_mfcc.png 0', 'HC_a\\\\healthy\\\\1_a_chromagram.png 0', 'HC_a\\\\healthy\\\\1_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\1_a_mfcc.png 0', 'HC_a\\\\healthy\\\\200_a_chromagram.png 0', 'HC_a\\\\healthy\\\\200_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\200_a_mfcc.png 0', 'HC_a\\\\healthy\\\\201_a_chromagram.png 0', 'HC_a\\\\healthy\\\\201_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\201_a_mfcc.png 0', 'HC_a\\\\healthy\\\\202_a_chromagram.png 0', 'HC_a\\\\healthy\\\\202_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\202_a_mfcc.png 0', 'HC_a\\\\healthy\\\\203_a_chromagram.png 0', 'HC_a\\\\healthy\\\\203_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\203_a_mfcc.png 0', 'HC_a\\\\healthy\\\\204_a_chromagram.png 0', 'HC_a\\\\healthy\\\\204_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\204_a_mfcc.png 0', 'HC_a\\\\healthy\\\\205_a_chromagram.png 0', 'HC_a\\\\healthy\\\\205_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\205_a_mfcc.png 0', 'HC_a\\\\healthy\\\\206_a_chromagram.png 0', 'HC_a\\\\healthy\\\\206_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\206_a_mfcc.png 0', 'HC_a\\\\healthy\\\\207_a_chromagram.png 0', 'HC_a\\\\healthy\\\\207_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\207_a_mfcc.png 0', 'HC_a\\\\healthy\\\\208_a_chromagram.png 0', 'HC_a\\\\healthy\\\\208_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\208_a_mfcc.png 0', 'HC_a\\\\healthy\\\\209_a_chromagram.png 0', 'HC_a\\\\healthy\\\\209_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\209_a_mfcc.png 0', 'HC_a\\\\healthy\\\\20_a_chromagram.png 0', 'HC_a\\\\healthy\\\\20_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\20_a_mfcc.png 0', 'HC_a\\\\healthy\\\\210_a_chromagram.png 0', 'HC_a\\\\healthy\\\\210_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\210_a_mfcc.png 0', 'HC_a\\\\healthy\\\\211_a_chromagram.png 0', 'HC_a\\\\healthy\\\\211_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\211_a_mfcc.png 0', 'HC_a\\\\healthy\\\\212_a_chromagram.png 0', 'HC_a\\\\healthy\\\\212_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\212_a_mfcc.png 0', 'HC_a\\\\healthy\\\\213_a_chromagram.png 0', 'HC_a\\\\healthy\\\\213_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\213_a_mfcc.png 0', 'HC_a\\\\healthy\\\\214_a_chromagram.png 0', 'HC_a\\\\healthy\\\\214_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\214_a_mfcc.png 0', 'HC_a\\\\healthy\\\\215_a_chromagram.png 0', 'HC_a\\\\healthy\\\\215_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\215_a_mfcc.png 0', 'HC_a\\\\healthy\\\\216_a_chromagram.png 0', 'HC_a\\\\healthy\\\\216_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\216_a_mfcc.png 0', 'HC_a\\\\healthy\\\\217_a_chromagram.png 0', 'HC_a\\\\healthy\\\\217_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\217_a_mfcc.png 0', 'HC_a\\\\healthy\\\\218_a_chromagram.png 0', 'HC_a\\\\healthy\\\\218_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\218_a_mfcc.png 0', 'HC_a\\\\healthy\\\\219_a_chromagram.png 0', 'HC_a\\\\healthy\\\\219_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\219_a_mfcc.png 0', 'HC_a\\\\healthy\\\\21_a_chromagram.png 0', 'HC_a\\\\healthy\\\\21_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\21_a_mfcc.png 0', 'HC_a\\\\healthy\\\\220_a_chromagram.png 0', 'HC_a\\\\healthy\\\\220_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\220_a_mfcc.png 0', 'HC_a\\\\healthy\\\\221_a_chromagram.png 0', 'HC_a\\\\healthy\\\\221_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\221_a_mfcc.png 0', 'HC_a\\\\healthy\\\\222_a_chromagram.png 0', 'HC_a\\\\healthy\\\\222_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\222_a_mfcc.png 0', 'HC_a\\\\healthy\\\\223_a_chromagram.png 0', 'HC_a\\\\healthy\\\\223_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\223_a_mfcc.png 0', 'HC_a\\\\healthy\\\\224_a_chromagram.png 0', 'HC_a\\\\healthy\\\\224_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\224_a_mfcc.png 0', 'HC_a\\\\healthy\\\\225_a_chromagram.png 0', 'HC_a\\\\healthy\\\\225_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\225_a_mfcc.png 0', 'HC_a\\\\healthy\\\\226_a_chromagram.png 0', 'HC_a\\\\healthy\\\\226_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\226_a_mfcc.png 0', 'HC_a\\\\healthy\\\\227_a_chromagram.png 0', 'HC_a\\\\healthy\\\\227_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\227_a_mfcc.png 0', 'HC_a\\\\healthy\\\\228_a_chromagram.png 0', 'HC_a\\\\healthy\\\\228_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\228_a_mfcc.png 0', 'HC_a\\\\healthy\\\\229_a_chromagram.png 0', 'HC_a\\\\healthy\\\\229_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\229_a_mfcc.png 0', 'HC_a\\\\healthy\\\\22_a_chromagram.png 0', 'HC_a\\\\healthy\\\\22_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\22_a_mfcc.png 0', 'HC_a\\\\healthy\\\\230_a_chromagram.png 0', 'HC_a\\\\healthy\\\\230_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\230_a_mfcc.png 0', 'HC_a\\\\healthy\\\\231_a_chromagram.png 0', 'HC_a\\\\healthy\\\\231_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\231_a_mfcc.png 0', 'HC_a\\\\healthy\\\\232_a_chromagram.png 0', 'HC_a\\\\healthy\\\\232_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\232_a_mfcc.png 0', 'HC_a\\\\healthy\\\\233_a_chromagram.png 0', 'HC_a\\\\healthy\\\\233_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\233_a_mfcc.png 0', 'HC_a\\\\healthy\\\\234_a_chromagram.png 0', 'HC_a\\\\healthy\\\\234_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\234_a_mfcc.png 0', 'HC_a\\\\healthy\\\\23_a_chromagram.png 0', 'HC_a\\\\healthy\\\\23_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\23_a_mfcc.png 0', 'HC_a\\\\healthy\\\\24_a_chromagram.png 0', 'HC_a\\\\healthy\\\\24_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\24_a_mfcc.png 0', 'HC_a\\\\healthy\\\\25_a_chromagram.png 0', 'HC_a\\\\healthy\\\\25_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\25_a_mfcc.png 0', 'HC_a\\\\healthy\\\\26_a_chromagram.png 0', 'HC_a\\\\healthy\\\\26_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\26_a_mfcc.png 0', 'HC_a\\\\healthy\\\\27_a_chromagram.png 0', 'HC_a\\\\healthy\\\\27_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\27_a_mfcc.png 0', 'HC_a\\\\healthy\\\\28_a_chromagram.png 0', 'HC_a\\\\healthy\\\\28_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\28_a_mfcc.png 0', 'HC_a\\\\healthy\\\\29_a_chromagram.png 0', 'HC_a\\\\healthy\\\\29_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\29_a_mfcc.png 0', 'HC_a\\\\healthy\\\\2_a_chromagram.png 0', 'HC_a\\\\healthy\\\\2_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\2_a_mfcc.png 0', 'HC_a\\\\healthy\\\\30_a_chromagram.png 0', 'HC_a\\\\healthy\\\\30_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\30_a_mfcc.png 0', 'HC_a\\\\healthy\\\\31_a_chromagram.png 0', 'HC_a\\\\healthy\\\\31_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\31_a_mfcc.png 0', 'HC_a\\\\healthy\\\\32_a_chromagram.png 0', 'HC_a\\\\healthy\\\\32_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\32_a_mfcc.png 0', 'HC_a\\\\healthy\\\\33_a_chromagram.png 0', 'HC_a\\\\healthy\\\\33_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\33_a_mfcc.png 0', 'HC_a\\\\healthy\\\\34_a_chromagram.png 0', 'HC_a\\\\healthy\\\\34_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\34_a_mfcc.png 0', 'HC_a\\\\healthy\\\\35_a_chromagram.png 0', 'HC_a\\\\healthy\\\\35_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\35_a_mfcc.png 0', 'HC_a\\\\healthy\\\\36_a_chromagram.png 0', 'HC_a\\\\healthy\\\\36_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\36_a_mfcc.png 0', 'HC_a\\\\healthy\\\\37_a_chromagram.png 0', 'HC_a\\\\healthy\\\\37_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\37_a_mfcc.png 0', 'HC_a\\\\healthy\\\\38_a_chromagram.png 0', 'HC_a\\\\healthy\\\\38_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\38_a_mfcc.png 0', 'HC_a\\\\healthy\\\\39_a_chromagram.png 0', 'HC_a\\\\healthy\\\\39_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\39_a_mfcc.png 0', 'HC_a\\\\healthy\\\\3_a_chromagram.png 0', 'HC_a\\\\healthy\\\\3_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\3_a_mfcc.png 0', 'HC_a\\\\healthy\\\\40_a_chromagram.png 0', 'HC_a\\\\healthy\\\\40_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\40_a_mfcc.png 0', 'HC_a\\\\healthy\\\\41_a_chromagram.png 0', 'HC_a\\\\healthy\\\\41_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\41_a_mfcc.png 0', 'HC_a\\\\healthy\\\\42_a_chromagram.png 0', 'HC_a\\\\healthy\\\\42_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\42_a_mfcc.png 0', 'HC_a\\\\healthy\\\\43_a_chromagram.png 0', 'HC_a\\\\healthy\\\\43_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\43_a_mfcc.png 0', 'HC_a\\\\healthy\\\\44_a_chromagram.png 0', 'HC_a\\\\healthy\\\\44_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\44_a_mfcc.png 0', 'HC_a\\\\healthy\\\\45_a_chromagram.png 0', 'HC_a\\\\healthy\\\\45_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\45_a_mfcc.png 0', 'HC_a\\\\healthy\\\\46_a_chromagram.png 0', 'HC_a\\\\healthy\\\\46_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\46_a_mfcc.png 0', 'HC_a\\\\healthy\\\\47_a_chromagram.png 0', 'HC_a\\\\healthy\\\\47_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\47_a_mfcc.png 0', 'HC_a\\\\healthy\\\\48_a_chromagram.png 0', 'HC_a\\\\healthy\\\\48_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\48_a_mfcc.png 0', 'HC_a\\\\healthy\\\\49_a_chromagram.png 0', 'HC_a\\\\healthy\\\\49_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\49_a_mfcc.png 0', 'HC_a\\\\healthy\\\\4_a_chromagram.png 0', 'HC_a\\\\healthy\\\\4_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\4_a_mfcc.png 0', 'HC_a\\\\healthy\\\\50_a_chromagram.png 0', 'HC_a\\\\healthy\\\\50_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\50_a_mfcc.png 0', 'HC_a\\\\healthy\\\\51_a_chromagram.png 0', 'HC_a\\\\healthy\\\\51_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\51_a_mfcc.png 0', 'HC_a\\\\healthy\\\\52_a_chromagram.png 0', 'HC_a\\\\healthy\\\\52_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\52_a_mfcc.png 0', 'HC_a\\\\healthy\\\\53_a_chromagram.png 0', 'HC_a\\\\healthy\\\\53_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\53_a_mfcc.png 0', 'HC_a\\\\healthy\\\\54_a_chromagram.png 0', 'HC_a\\\\healthy\\\\54_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\54_a_mfcc.png 0', 'HC_a\\\\healthy\\\\55_a_chromagram.png 0', 'HC_a\\\\healthy\\\\55_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\55_a_mfcc.png 0', 'HC_a\\\\healthy\\\\56_a_chromagram.png 0', 'HC_a\\\\healthy\\\\56_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\56_a_mfcc.png 0', 'HC_a\\\\healthy\\\\57_a_chromagram.png 0', 'HC_a\\\\healthy\\\\57_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\57_a_mfcc.png 0', 'HC_a\\\\healthy\\\\58_a_chromagram.png 0', 'HC_a\\\\healthy\\\\58_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\58_a_mfcc.png 0', 'HC_a\\\\healthy\\\\59_a_chromagram.png 0', 'HC_a\\\\healthy\\\\59_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\59_a_mfcc.png 0', 'HC_a\\\\healthy\\\\5_a_chromagram.png 0', 'HC_a\\\\healthy\\\\5_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\5_a_mfcc.png 0', 'HC_a\\\\healthy\\\\60_a_chromagram.png 0', 'HC_a\\\\healthy\\\\60_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\60_a_mfcc.png 0', 'HC_a\\\\healthy\\\\6_a_chromagram.png 0', 'HC_a\\\\healthy\\\\6_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\6_a_mfcc.png 0', 'HC_a\\\\healthy\\\\7_a_chromagram.png 0', 'HC_a\\\\healthy\\\\7_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\7_a_mfcc.png 0', 'HC_a\\\\healthy\\\\8_a_chromagram.png 0', 'HC_a\\\\healthy\\\\8_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\8_a_mfcc.png 0', 'HC_a\\\\healthy\\\\9_a_chromagram.png 0', 'HC_a\\\\healthy\\\\9_a_log_mel_spectrogram.png 0', 'HC_a\\\\healthy\\\\9_a_mfcc.png 0', 'HC_a\\\\ill\\\\100_a_chromagram.png 1', 'HC_a\\\\ill\\\\100_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\100_a_mfcc.png 1', 'HC_a\\\\ill\\\\101_a_chromagram.png 1', 'HC_a\\\\ill\\\\101_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\101_a_mfcc.png 1', 'HC_a\\\\ill\\\\102_a_chromagram.png 1', 'HC_a\\\\ill\\\\102_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\102_a_mfcc.png 1', 'HC_a\\\\ill\\\\105_a_chromagram.png 1', 'HC_a\\\\ill\\\\105_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\105_a_mfcc.png 1', 'HC_a\\\\ill\\\\106_a_chromagram.png 1', 'HC_a\\\\ill\\\\106_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\106_a_mfcc.png 1', 'HC_a\\\\ill\\\\107_a_chromagram.png 1', 'HC_a\\\\ill\\\\107_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\107_a_mfcc.png 1', 'HC_a\\\\ill\\\\108_a_chromagram.png 1', 'HC_a\\\\ill\\\\108_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\108_a_mfcc.png 1', 'HC_a\\\\ill\\\\112_a_chromagram.png 1', 'HC_a\\\\ill\\\\112_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\112_a_mfcc.png 1', 'HC_a\\\\ill\\\\115_a_chromagram.png 1', 'HC_a\\\\ill\\\\115_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\115_a_mfcc.png 1', 'HC_a\\\\ill\\\\116_a_chromagram.png 1', 'HC_a\\\\ill\\\\116_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\116_a_mfcc.png 1', 'HC_a\\\\ill\\\\118_a_chromagram.png 1', 'HC_a\\\\ill\\\\118_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\118_a_mfcc.png 1', 'HC_a\\\\ill\\\\119_a_chromagram.png 1', 'HC_a\\\\ill\\\\119_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\119_a_mfcc.png 1', 'HC_a\\\\ill\\\\120_a_chromagram.png 1', 'HC_a\\\\ill\\\\120_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\120_a_mfcc.png 1', 'HC_a\\\\ill\\\\121_a_chromagram.png 1', 'HC_a\\\\ill\\\\121_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\121_a_mfcc.png 1', 'HC_a\\\\ill\\\\122_a_chromagram.png 1', 'HC_a\\\\ill\\\\122_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\122_a_mfcc.png 1', 'HC_a\\\\ill\\\\126_a_chromagram.png 1', 'HC_a\\\\ill\\\\126_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\126_a_mfcc.png 1', 'HC_a\\\\ill\\\\127_a_chromagram.png 1', 'HC_a\\\\ill\\\\127_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\127_a_mfcc.png 1', 'HC_a\\\\ill\\\\128_a_chromagram.png 1', 'HC_a\\\\ill\\\\128_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\128_a_mfcc.png 1', 'HC_a\\\\ill\\\\129_a_chromagram.png 1', 'HC_a\\\\ill\\\\129_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\129_a_mfcc.png 1', 'HC_a\\\\ill\\\\150_a_chromagram.png 1', 'HC_a\\\\ill\\\\150_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\150_a_mfcc.png 1', 'HC_a\\\\ill\\\\151_a_chromagram.png 1', 'HC_a\\\\ill\\\\151_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\151_a_mfcc.png 1', 'HC_a\\\\ill\\\\152_a_chromagram.png 1', 'HC_a\\\\ill\\\\152_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\152_a_mfcc.png 1', 'HC_a\\\\ill\\\\153_a_chromagram.png 1', 'HC_a\\\\ill\\\\153_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\153_a_mfcc.png 1', 'HC_a\\\\ill\\\\154_a_chromagram.png 1', 'HC_a\\\\ill\\\\154_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\154_a_mfcc.png 1', 'HC_a\\\\ill\\\\155_a_chromagram.png 1', 'HC_a\\\\ill\\\\155_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\155_a_mfcc.png 1', 'HC_a\\\\ill\\\\156_a_chromagram.png 1', 'HC_a\\\\ill\\\\156_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\156_a_mfcc.png 1', 'HC_a\\\\ill\\\\157_a_chromagram.png 1', 'HC_a\\\\ill\\\\157_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\157_a_mfcc.png 1', 'HC_a\\\\ill\\\\158_a_chromagram.png 1', 'HC_a\\\\ill\\\\158_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\158_a_mfcc.png 1', 'HC_a\\\\ill\\\\159_a_chromagram.png 1', 'HC_a\\\\ill\\\\159_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\159_a_mfcc.png 1', 'HC_a\\\\ill\\\\160_a_chromagram.png 1', 'HC_a\\\\ill\\\\160_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\160_a_mfcc.png 1', 'HC_a\\\\ill\\\\161_a_chromagram.png 1', 'HC_a\\\\ill\\\\161_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\161_a_mfcc.png 1', 'HC_a\\\\ill\\\\162_a_chromagram.png 1', 'HC_a\\\\ill\\\\162_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\162_a_mfcc.png 1', 'HC_a\\\\ill\\\\163_a_chromagram.png 1', 'HC_a\\\\ill\\\\163_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\163_a_mfcc.png 1', 'HC_a\\\\ill\\\\164_a_chromagram.png 1', 'HC_a\\\\ill\\\\164_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\164_a_mfcc.png 1', 'HC_a\\\\ill\\\\165_a_chromagram.png 1', 'HC_a\\\\ill\\\\165_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\165_a_mfcc.png 1', 'HC_a\\\\ill\\\\166_a_chromagram.png 1', 'HC_a\\\\ill\\\\166_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\166_a_mfcc.png 1', 'HC_a\\\\ill\\\\167_a_chromagram.png 1', 'HC_a\\\\ill\\\\167_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\167_a_mfcc.png 1', 'HC_a\\\\ill\\\\168_a_chromagram.png 1', 'HC_a\\\\ill\\\\168_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\168_a_mfcc.png 1', 'HC_a\\\\ill\\\\169_a_chromagram.png 1', 'HC_a\\\\ill\\\\169_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\169_a_mfcc.png 1', 'HC_a\\\\ill\\\\170_a_chromagram.png 1', 'HC_a\\\\ill\\\\170_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\170_a_mfcc.png 1', 'HC_a\\\\ill\\\\171_a_chromagram.png 1', 'HC_a\\\\ill\\\\171_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\171_a_mfcc.png 1', 'HC_a\\\\ill\\\\172_a_chromagram.png 1', 'HC_a\\\\ill\\\\172_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\172_a_mfcc.png 1', 'HC_a\\\\ill\\\\173_a_chromagram.png 1', 'HC_a\\\\ill\\\\173_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\173_a_mfcc.png 1', 'HC_a\\\\ill\\\\174_a_chromagram.png 1', 'HC_a\\\\ill\\\\174_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\174_a_mfcc.png 1', 'HC_a\\\\ill\\\\175_a_chromagram.png 1', 'HC_a\\\\ill\\\\175_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\175_a_mfcc.png 1', 'HC_a\\\\ill\\\\176_a_chromagram.png 1', 'HC_a\\\\ill\\\\176_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\176_a_mfcc.png 1', 'HC_a\\\\ill\\\\177_a_chromagram.png 1', 'HC_a\\\\ill\\\\177_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\177_a_mfcc.png 1', 'HC_a\\\\ill\\\\178_a_chromagram.png 1', 'HC_a\\\\ill\\\\178_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\178_a_mfcc.png 1', 'HC_a\\\\ill\\\\179_a_chromagram.png 1', 'HC_a\\\\ill\\\\179_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\179_a_mfcc.png 1', 'HC_a\\\\ill\\\\180_a_chromagram.png 1', 'HC_a\\\\ill\\\\180_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\180_a_mfcc.png 1', 'HC_a\\\\ill\\\\181_a_chromagram.png 1', 'HC_a\\\\ill\\\\181_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\181_a_mfcc.png 1', 'HC_a\\\\ill\\\\182_a_chromagram.png 1', 'HC_a\\\\ill\\\\182_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\182_a_mfcc.png 1', 'HC_a\\\\ill\\\\183_a_chromagram.png 1', 'HC_a\\\\ill\\\\183_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\183_a_mfcc.png 1', 'HC_a\\\\ill\\\\184_a_chromagram.png 1', 'HC_a\\\\ill\\\\184_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\184_a_mfcc.png 1', 'HC_a\\\\ill\\\\61_a_chromagram.png 1', 'HC_a\\\\ill\\\\61_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\61_a_mfcc.png 1', 'HC_a\\\\ill\\\\62_a_chromagram.png 1', 'HC_a\\\\ill\\\\62_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\62_a_mfcc.png 1', 'HC_a\\\\ill\\\\63_a_chromagram.png 1', 'HC_a\\\\ill\\\\63_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\63_a_mfcc.png 1', 'HC_a\\\\ill\\\\64_a_chromagram.png 1', 'HC_a\\\\ill\\\\64_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\64_a_mfcc.png 1', 'HC_a\\\\ill\\\\65_a_chromagram.png 1', 'HC_a\\\\ill\\\\65_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\65_a_mfcc.png 1', 'HC_a\\\\ill\\\\66_a_chromagram.png 1', 'HC_a\\\\ill\\\\66_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\66_a_mfcc.png 1', 'HC_a\\\\ill\\\\67_a_chromagram.png 1', 'HC_a\\\\ill\\\\67_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\67_a_mfcc.png 1', 'HC_a\\\\ill\\\\68_a_chromagram.png 1', 'HC_a\\\\ill\\\\68_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\68_a_mfcc.png 1', 'HC_a\\\\ill\\\\69_a_chromagram.png 1', 'HC_a\\\\ill\\\\69_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\69_a_mfcc.png 1', 'HC_a\\\\ill\\\\70_a_chromagram.png 1', 'HC_a\\\\ill\\\\70_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\70_a_mfcc.png 1', 'HC_a\\\\ill\\\\71_a_chromagram.png 1', 'HC_a\\\\ill\\\\71_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\71_a_mfcc.png 1', 'HC_a\\\\ill\\\\72_a_chromagram.png 1', 'HC_a\\\\ill\\\\72_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\72_a_mfcc.png 1', 'HC_a\\\\ill\\\\73_a_chromagram.png 1', 'HC_a\\\\ill\\\\73_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\73_a_mfcc.png 1', 'HC_a\\\\ill\\\\74_a_chromagram.png 1', 'HC_a\\\\ill\\\\74_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\74_a_mfcc.png 1', 'HC_a\\\\ill\\\\75_a_chromagram.png 1', 'HC_a\\\\ill\\\\75_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\75_a_mfcc.png 1', 'HC_a\\\\ill\\\\76_a_chromagram.png 1', 'HC_a\\\\ill\\\\76_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\76_a_mfcc.png 1', 'HC_a\\\\ill\\\\77_a_chromagram.png 1', 'HC_a\\\\ill\\\\77_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\77_a_mfcc.png 1', 'HC_a\\\\ill\\\\78_a_chromagram.png 1', 'HC_a\\\\ill\\\\78_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\78_a_mfcc.png 1', 'HC_a\\\\ill\\\\79_a_chromagram.png 1', 'HC_a\\\\ill\\\\79_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\79_a_mfcc.png 1', 'HC_a\\\\ill\\\\80_a_chromagram.png 1', 'HC_a\\\\ill\\\\80_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\80_a_mfcc.png 1', 'HC_a\\\\ill\\\\81_a_chromagram.png 1', 'HC_a\\\\ill\\\\81_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\81_a_mfcc.png 1', 'HC_a\\\\ill\\\\82_a_chromagram.png 1', 'HC_a\\\\ill\\\\82_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\82_a_mfcc.png 1', 'HC_a\\\\ill\\\\83_a_chromagram.png 1', 'HC_a\\\\ill\\\\83_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\83_a_mfcc.png 1', 'HC_a\\\\ill\\\\84_a_chromagram.png 1', 'HC_a\\\\ill\\\\84_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\84_a_mfcc.png 1', 'HC_a\\\\ill\\\\85_a_chromagram.png 1', 'HC_a\\\\ill\\\\85_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\85_a_mfcc.png 1', 'HC_a\\\\ill\\\\86_a_chromagram.png 1', 'HC_a\\\\ill\\\\86_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\86_a_mfcc.png 1', 'HC_a\\\\ill\\\\87_a_chromagram.png 1', 'HC_a\\\\ill\\\\87_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\87_a_mfcc.png 1', 'HC_a\\\\ill\\\\88_a_chromagram.png 1', 'HC_a\\\\ill\\\\88_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\88_a_mfcc.png 1', 'HC_a\\\\ill\\\\89_a_chromagram.png 1', 'HC_a\\\\ill\\\\89_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\89_a_mfcc.png 1', 'HC_a\\\\ill\\\\90_a_chromagram.png 1', 'HC_a\\\\ill\\\\90_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\90_a_mfcc.png 1', 'HC_a\\\\ill\\\\91_a_chromagram.png 1', 'HC_a\\\\ill\\\\91_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\91_a_mfcc.png 1', 'HC_a\\\\ill\\\\92_a_chromagram.png 1', 'HC_a\\\\ill\\\\92_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\92_a_mfcc.png 1', 'HC_a\\\\ill\\\\93_a_chromagram.png 1', 'HC_a\\\\ill\\\\93_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\93_a_mfcc.png 1', 'HC_a\\\\ill\\\\94_a_chromagram.png 1', 'HC_a\\\\ill\\\\94_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\94_a_mfcc.png 1', 'HC_a\\\\ill\\\\95_a_chromagram.png 1', 'HC_a\\\\ill\\\\95_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\95_a_mfcc.png 1', 'HC_a\\\\ill\\\\96_a_chromagram.png 1', 'HC_a\\\\ill\\\\96_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\96_a_mfcc.png 1', 'HC_a\\\\ill\\\\97_a_chromagram.png 1', 'HC_a\\\\ill\\\\97_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\97_a_mfcc.png 1', 'HC_a\\\\ill\\\\98_a_chromagram.png 1', 'HC_a\\\\ill\\\\98_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\98_a_mfcc.png 1', 'HC_a\\\\ill\\\\99_a_chromagram.png 1', 'HC_a\\\\ill\\\\99_a_log_mel_spectrogram.png 1', 'HC_a\\\\ill\\\\99_a_mfcc.png 1']\n",
      "['10', '11', '12', '130', '131', '132', '133', '134', '135', '136', '137', '138', '139', '13', '140', '141', '142', '143', '144', '145', '146', '147', '148', '149', '14', '15', '16', '17', '185', '186', '187', '188', '189', '18', '190', '191', '192', '193', '194', '195', '196', '197', '198', '199', '19', '1', '200', '201', '202', '203', '204', '205', '206', '207', '208', '209', '20', '210', '211', '212', '213', '214', '215', '216', '217', '218', '219', '21', '220', '221', '222', '223', '224', '225', '226', '227', '228', '229', '22', '230', '231', '232', '233', '234', '23', '24', '25', '26', '27', '28', '29', '2', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '3', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '4', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '5', '60', '6', '7', '8', '9', '100', '101', '102', '105', '106', '107', '108', '112', '115', '116', '118', '119', '120', '121', '122', '126', '127', '128', '129', '150', '151', '152', '153', '154', '155', '156', '157', '158', '159', '160', '161', '162', '163', '164', '165', '166', '167', '168', '169', '170', '171', '172', '173', '174', '175', '176', '177', '178', '179', '180', '181', '182', '183', '184', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99']\n"
     ]
    }
   ],
   "source": [
    "file_paths = []\n",
    "patients_ids = []\n",
    "file_name = 'dataset_HC_a_1.txt'\n",
    "\n",
    "with open(file_name, 'r') as file:\n",
    "    for line in file:\n",
    "        file_paths.append(line.strip())\n",
    "\n",
    "with open(file_name, 'r') as file:\n",
    "    for line in file:\n",
    "        spec_path, label = line.split(' ')\n",
    "        patient_id = os.path.splitext(os.path.basename(spec_path))[0]\n",
    "        patient_id = patient_id.split('_')[0]\n",
    "        if patient_id not in patients_ids:\n",
    "            patients_ids.append(patient_id)\n",
    "\n",
    "print(file_paths)\n",
    "print(patients_ids)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sample 1 - Patient ID: 10 - Label: 0\n",
      "torch.Size([12, 3, 672, 672]) tensor([0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1])\n",
      "0\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "transform = transforms.Compose([\n",
    "    transforms.Resize((224, 672))\n",
    "])\n",
    "\n",
    "dataset = SpectrogramDataset(file_paths, transform)\n",
    "\n",
    "dataloader = DataLoader(dataset, batch_size=12, shuffle=True)\n",
    "\n",
    "for i, (data, label) in enumerate(dataloader):\n",
    "    patient_id = list(dataset.patient_spectrograms.keys())[i]\n",
    "    patient_label = dataset.patient_labels.get(patient_id, None)\n",
    "    print(f\"Sample {i + 1} - Patient ID: {patient_id} - Label: {patient_label}\")\n",
    "    print(data.shape, label)\n",
    "    num_spectrograms = data.shape[0]\n",
    "    print(i)\n",
    "    img = data[i].numpy()\n",
    "    img = img.transpose(1, 2, 0)\n",
    "    plt.imshow(img)\n",
    "    plt.show()\n",
    "    if i == 0:\n",
    "        break\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fold 1/5\n",
      "Epoch [1/10] - Loss: 2.8007815798123676\n",
      "Epoch [2/10] - Loss: 0.9187872370084127\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[1;32md:\\CVD_CV\\Data\\simplenn.ipynb Cell 6\u001b[0m line \u001b[0;36m4\n\u001b[0;32m     <a href='vscode-notebook-cell:/d%3A/CVD_CV/Data/simplenn.ipynb#X13sZmlsZQ%3D%3D?line=42'>43</a>\u001b[0m inputs, labels \u001b[39m=\u001b[39m data\n\u001b[0;32m     <a href='vscode-notebook-cell:/d%3A/CVD_CV/Data/simplenn.ipynb#X13sZmlsZQ%3D%3D?line=44'>45</a>\u001b[0m optimizer\u001b[39m.\u001b[39mzero_grad()\n\u001b[1;32m---> <a href='vscode-notebook-cell:/d%3A/CVD_CV/Data/simplenn.ipynb#X13sZmlsZQ%3D%3D?line=46'>47</a>\u001b[0m outputs \u001b[39m=\u001b[39m model(inputs)\n\u001b[0;32m     <a href='vscode-notebook-cell:/d%3A/CVD_CV/Data/simplenn.ipynb#X13sZmlsZQ%3D%3D?line=47'>48</a>\u001b[0m target \u001b[39m=\u001b[39m labels\n\u001b[0;32m     <a href='vscode-notebook-cell:/d%3A/CVD_CV/Data/simplenn.ipynb#X13sZmlsZQ%3D%3D?line=48'>49</a>\u001b[0m num_classes \u001b[39m=\u001b[39m \u001b[39m2\u001b[39m\n",
      "File \u001b[1;32md:\\CVD_CV\\.venv\\lib\\site-packages\\torch\\nn\\modules\\module.py:1501\u001b[0m, in \u001b[0;36mModule._call_impl\u001b[1;34m(self, *args, **kwargs)\u001b[0m\n\u001b[0;32m   1496\u001b[0m \u001b[39m# If we don't have any hooks, we want to skip the rest of the logic in\u001b[39;00m\n\u001b[0;32m   1497\u001b[0m \u001b[39m# this function, and just call forward.\u001b[39;00m\n\u001b[0;32m   1498\u001b[0m \u001b[39mif\u001b[39;00m \u001b[39mnot\u001b[39;00m (\u001b[39mself\u001b[39m\u001b[39m.\u001b[39m_backward_hooks \u001b[39mor\u001b[39;00m \u001b[39mself\u001b[39m\u001b[39m.\u001b[39m_backward_pre_hooks \u001b[39mor\u001b[39;00m \u001b[39mself\u001b[39m\u001b[39m.\u001b[39m_forward_hooks \u001b[39mor\u001b[39;00m \u001b[39mself\u001b[39m\u001b[39m.\u001b[39m_forward_pre_hooks\n\u001b[0;32m   1499\u001b[0m         \u001b[39mor\u001b[39;00m _global_backward_pre_hooks \u001b[39mor\u001b[39;00m _global_backward_hooks\n\u001b[0;32m   1500\u001b[0m         \u001b[39mor\u001b[39;00m _global_forward_hooks \u001b[39mor\u001b[39;00m _global_forward_pre_hooks):\n\u001b[1;32m-> 1501\u001b[0m     \u001b[39mreturn\u001b[39;00m forward_call(\u001b[39m*\u001b[39margs, \u001b[39m*\u001b[39m\u001b[39m*\u001b[39mkwargs)\n\u001b[0;32m   1502\u001b[0m \u001b[39m# Do not call functions when jit is used\u001b[39;00m\n\u001b[0;32m   1503\u001b[0m full_backward_hooks, non_full_backward_hooks \u001b[39m=\u001b[39m [], []\n",
      "\u001b[1;32md:\\CVD_CV\\Data\\simplenn.ipynb Cell 6\u001b[0m line \u001b[0;36m2\n\u001b[0;32m     <a href='vscode-notebook-cell:/d%3A/CVD_CV/Data/simplenn.ipynb#X13sZmlsZQ%3D%3D?line=24'>25</a>\u001b[0m \u001b[39mdef\u001b[39;00m \u001b[39mforward\u001b[39m(\u001b[39mself\u001b[39m, x):\n\u001b[1;32m---> <a href='vscode-notebook-cell:/d%3A/CVD_CV/Data/simplenn.ipynb#X13sZmlsZQ%3D%3D?line=25'>26</a>\u001b[0m     x \u001b[39m=\u001b[39m \u001b[39mself\u001b[39;49m\u001b[39m.\u001b[39;49mconv1(x)\n\u001b[0;32m     <a href='vscode-notebook-cell:/d%3A/CVD_CV/Data/simplenn.ipynb#X13sZmlsZQ%3D%3D?line=26'>27</a>\u001b[0m     x \u001b[39m=\u001b[39m \u001b[39mself\u001b[39m\u001b[39m.\u001b[39mbatch1(x)\n\u001b[0;32m     <a href='vscode-notebook-cell:/d%3A/CVD_CV/Data/simplenn.ipynb#X13sZmlsZQ%3D%3D?line=27'>28</a>\u001b[0m     x \u001b[39m=\u001b[39m \u001b[39mself\u001b[39m\u001b[39m.\u001b[39mrelu1(x)\n",
      "File \u001b[1;32md:\\CVD_CV\\.venv\\lib\\site-packages\\torch\\nn\\modules\\module.py:1501\u001b[0m, in \u001b[0;36mModule._call_impl\u001b[1;34m(self, *args, **kwargs)\u001b[0m\n\u001b[0;32m   1496\u001b[0m \u001b[39m# If we don't have any hooks, we want to skip the rest of the logic in\u001b[39;00m\n\u001b[0;32m   1497\u001b[0m \u001b[39m# this function, and just call forward.\u001b[39;00m\n\u001b[0;32m   1498\u001b[0m \u001b[39mif\u001b[39;00m \u001b[39mnot\u001b[39;00m (\u001b[39mself\u001b[39m\u001b[39m.\u001b[39m_backward_hooks \u001b[39mor\u001b[39;00m \u001b[39mself\u001b[39m\u001b[39m.\u001b[39m_backward_pre_hooks \u001b[39mor\u001b[39;00m \u001b[39mself\u001b[39m\u001b[39m.\u001b[39m_forward_hooks \u001b[39mor\u001b[39;00m \u001b[39mself\u001b[39m\u001b[39m.\u001b[39m_forward_pre_hooks\n\u001b[0;32m   1499\u001b[0m         \u001b[39mor\u001b[39;00m _global_backward_pre_hooks \u001b[39mor\u001b[39;00m _global_backward_hooks\n\u001b[0;32m   1500\u001b[0m         \u001b[39mor\u001b[39;00m _global_forward_hooks \u001b[39mor\u001b[39;00m _global_forward_pre_hooks):\n\u001b[1;32m-> 1501\u001b[0m     \u001b[39mreturn\u001b[39;00m forward_call(\u001b[39m*\u001b[39margs, \u001b[39m*\u001b[39m\u001b[39m*\u001b[39mkwargs)\n\u001b[0;32m   1502\u001b[0m \u001b[39m# Do not call functions when jit is used\u001b[39;00m\n\u001b[0;32m   1503\u001b[0m full_backward_hooks, non_full_backward_hooks \u001b[39m=\u001b[39m [], []\n",
      "File \u001b[1;32md:\\CVD_CV\\.venv\\lib\\site-packages\\torch\\nn\\modules\\conv.py:463\u001b[0m, in \u001b[0;36mConv2d.forward\u001b[1;34m(self, input)\u001b[0m\n\u001b[0;32m    462\u001b[0m \u001b[39mdef\u001b[39;00m \u001b[39mforward\u001b[39m(\u001b[39mself\u001b[39m, \u001b[39minput\u001b[39m: Tensor) \u001b[39m-\u001b[39m\u001b[39m>\u001b[39m Tensor:\n\u001b[1;32m--> 463\u001b[0m     \u001b[39mreturn\u001b[39;00m \u001b[39mself\u001b[39;49m\u001b[39m.\u001b[39;49m_conv_forward(\u001b[39minput\u001b[39;49m, \u001b[39mself\u001b[39;49m\u001b[39m.\u001b[39;49mweight, \u001b[39mself\u001b[39;49m\u001b[39m.\u001b[39;49mbias)\n",
      "File \u001b[1;32md:\\CVD_CV\\.venv\\lib\\site-packages\\torch\\nn\\modules\\conv.py:459\u001b[0m, in \u001b[0;36mConv2d._conv_forward\u001b[1;34m(self, input, weight, bias)\u001b[0m\n\u001b[0;32m    455\u001b[0m \u001b[39mif\u001b[39;00m \u001b[39mself\u001b[39m\u001b[39m.\u001b[39mpadding_mode \u001b[39m!=\u001b[39m \u001b[39m'\u001b[39m\u001b[39mzeros\u001b[39m\u001b[39m'\u001b[39m:\n\u001b[0;32m    456\u001b[0m     \u001b[39mreturn\u001b[39;00m F\u001b[39m.\u001b[39mconv2d(F\u001b[39m.\u001b[39mpad(\u001b[39minput\u001b[39m, \u001b[39mself\u001b[39m\u001b[39m.\u001b[39m_reversed_padding_repeated_twice, mode\u001b[39m=\u001b[39m\u001b[39mself\u001b[39m\u001b[39m.\u001b[39mpadding_mode),\n\u001b[0;32m    457\u001b[0m                     weight, bias, \u001b[39mself\u001b[39m\u001b[39m.\u001b[39mstride,\n\u001b[0;32m    458\u001b[0m                     _pair(\u001b[39m0\u001b[39m), \u001b[39mself\u001b[39m\u001b[39m.\u001b[39mdilation, \u001b[39mself\u001b[39m\u001b[39m.\u001b[39mgroups)\n\u001b[1;32m--> 459\u001b[0m \u001b[39mreturn\u001b[39;00m F\u001b[39m.\u001b[39;49mconv2d(\u001b[39minput\u001b[39;49m, weight, bias, \u001b[39mself\u001b[39;49m\u001b[39m.\u001b[39;49mstride,\n\u001b[0;32m    460\u001b[0m                 \u001b[39mself\u001b[39;49m\u001b[39m.\u001b[39;49mpadding, \u001b[39mself\u001b[39;49m\u001b[39m.\u001b[39;49mdilation, \u001b[39mself\u001b[39;49m\u001b[39m.\u001b[39;49mgroups)\n",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "transform = transforms.Compose([\n",
    "    transforms.Resize((224, 672))\n",
    "])\n",
    "\n",
    "num_epochs = 25\n",
    "num_splits = 5 \n",
    "kf = KFold(n_splits=num_splits, shuffle=True, random_state=42)\n",
    "\n",
    "def get_patient_id(file):\n",
    "    spec_path, label = file.split(' ')\n",
    "    patient_id = os.path.splitext(os.path.basename(spec_path))[0]\n",
    "    patient_id = patient_id.split('_')[0]\n",
    "\n",
    "    return patient_id\n",
    "\n",
    "for fold, (train_idx, test_idx) in enumerate(kf.split(patients_ids)):\n",
    "    print(f\"Fold {fold + 1}/{num_splits}\")\n",
    "\n",
    "    train_patients = np.array(patients_ids)[train_idx]\n",
    "    test_patients = np.array(patients_ids)[test_idx]\n",
    "\n",
    "    train_files = [file for file in file_paths if get_patient_id(file) in train_patients]\n",
    "    test_files = [file for file in file_paths if get_patient_id(file) in test_patients]\n",
    "\n",
    "\n",
    "    train_dataset = SpectrogramDataset(train_files, transform)\n",
    "    test_dataset = SpectrogramDataset(test_files, transform)\n",
    "\n",
    "    batch_size = 12\n",
    "    train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)\n",
    "    test_loader = DataLoader(test_dataset, batch_size=batch_size, shuffle=False)\n",
    "\n",
    "    model = SpecNet()\n",
    "\n",
    "    criterion = nn.BCELoss()\n",
    "    optimizer = optim.Adam(model.parameters(), lr=0.001)\n",
    "\n",
    "    for epoch in range(num_epochs):\n",
    "        model.train()\n",
    "        total_loss = 0.0\n",
    "\n",
    "        for i, data in enumerate(train_loader, 0):\n",
    "            inputs, labels = data\n",
    "\n",
    "            optimizer.zero_grad()\n",
    "\n",
    "            outputs = model(inputs)\n",
    "            target = labels\n",
    "            num_classes = 2\n",
    "\n",
    "            target_one_hot = torch.zeros(target.size(0), num_classes)\n",
    "            target_one_hot.scatter_(1, target.unsqueeze(1), 1)\n",
    "\n",
    "            loss = criterion(outputs, target_one_hot.float())\n",
    "\n",
    "            loss.backward()\n",
    "            optimizer.step()\n",
    "\n",
    "            total_loss += loss.item()\n",
    "\n",
    "        print(f\"Epoch [{epoch + 1}/{num_epochs}] - Loss: {total_loss / len(train_loader)}\")\n",
    "\n",
    "    model.eval()\n",
    "    correct = 0\n",
    "    total = 0\n",
    "\n",
    "    with torch.no_grad():\n",
    "        for data in test_loader:\n",
    "            inputs, labels = data\n",
    "\n",
    "            outputs = model(inputs)\n",
    "\n",
    "            _, predicted = torch.max(outputs.data, 1)\n",
    "            total += labels.size(0)\n",
    "            correct += (predicted == labels).sum().item()\n",
    "\n",
    "    print(f'Accuracy for Fold {fold + 1}: {100 * correct / total:.2f}%')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch [1/1] - Loss: 7.16472287774086\n",
      "Accuracy of the network on the 10000 test images: 62 %\n"
     ]
    }
   ],
   "source": [
    "transform = transforms.Compose([\n",
    "    transforms.Resize((224, 672))\n",
    "])\n",
    "\n",
    "\n",
    "dataset = SpectrogramDataset(file_paths, transform)\n",
    "\n",
    "train_size = int(0.8 * len(dataset))\n",
    "test_size = len(dataset) - train_size\n",
    "train_dataset, test_dataset = random_split(dataset, [train_size, test_size])\n",
    "\n",
    "batch_size = 12 \n",
    "train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)\n",
    "test_loader = DataLoader(test_dataset, batch_size=batch_size, shuffle=False)\n",
    "\n",
    "model = SpecNet()\n",
    "\n",
    "criterion = nn.BCELoss() \n",
    "optimizer = optim.Adam(model.parameters(), lr=0.001) \n",
    "\n",
    "num_epochs = 1\n",
    "for epoch in range(num_epochs):\n",
    "    model.train()\n",
    "    total_loss = 0.0\n",
    "\n",
    "    for i ,data in enumerate(train_loader, 0):\n",
    "        inputs, labels = data\n",
    "\n",
    "        optimizer.zero_grad()\n",
    "        \n",
    "        outputs = model(inputs)\n",
    "        target = labels\n",
    "        num_classes = 2\n",
    "\n",
    "        target_one_hot = torch.zeros(target.size(0), num_classes)\n",
    "        target_one_hot.scatter_(1, target.unsqueeze(1), 1)\n",
    "\n",
    "        loss = criterion(outputs, target_one_hot.float())\n",
    "\n",
    "        loss.backward()\n",
    "        optimizer.step()\n",
    "\n",
    "        total_loss += loss.item()\n",
    "\n",
    "    print(f\"Epoch [{epoch + 1}/{num_epochs}] - Loss: {total_loss / len(train_loader)}\")\n",
    "\n",
    "# Testing loop\n",
    "model.eval()\n",
    "correct = 0\n",
    "total = 0\n",
    "\n",
    "with torch.no_grad():\n",
    "    for data in test_loader:\n",
    "        inputs, labels = data\n",
    "\n",
    "        outputs = model(inputs)\n",
    "\n",
    "        _, predicted = torch.max(outputs.data, 1)\n",
    "        total += labels.size(0)\n",
    "        correct += (predicted == labels).sum().item()\n",
    "\n",
    "\n",
    "print(f'Accuracy of the network on the test images: {100 * correct // total} %')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": ".venv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.10"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
